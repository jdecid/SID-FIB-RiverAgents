// file: BesosRiverOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package edu.upc.fib.sid.ontology;

import edu.upc.fib.sid.ontology.interfaces.*;
import jade.content.onto.*;
import jade.content.schema.*;

/** file: BesosRiverOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2018/06/19, 11:47:03
 */
public class BesosRiverOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 3087186635179339273L;

  //NAME
  public static final String ONTOLOGY_NAME = "BesosRiver";
  // The singleton instance of this ontology
  private static Ontology theInstance = new BesosRiverOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String RIVER="River";
    public static final String STRETCH_NEXTSTRETCH="nextStretch";
    public static final String STRETCH="Stretch";
    public static final String TEXTILE="Textile";
    public static final String METALLURGICAL="Metallurgical";
    public static final String FACTORY_HASTANK="hasTank";
    public static final String FACTORY="Factory";
    public static final String CEMENT="Cement";
    public static final String TREATMENTPLANT_HASTANK="hasTank";
    public static final String TREATMENTPLANT="TreatmentPlant";
    public static final String PAPERMILL="PaperMill";
    public static final String SUPPLYWATER="SupplyWater";
    public static final String RETURNWATER="ReturnWater";
    public static final String RESPONDPOURREQUEST="RespondPourRequest";
    public static final String REQUESTPOUR="RequestPour";
    public static final String REQUESTWATER="RequestWater";
    public static final String WATERMASS_CONTAMINANT="contaminant";
    public static final String WATERMASS_VOLUME="volume";
    public static final String WATERMASS="WaterMass";
    public static final String WATERTANK_OWNEDBY="ownedBy";
    public static final String WATERTANK_HASWATERMASS="hasWaterMass";
    public static final String WATERTANK="WaterTank";

  /**
   * Constructor
  */
  private BesosRiverOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema waterTankSchema = new ConceptSchema(WATERTANK);
    add(waterTankSchema, WaterTank.class);
    ConceptSchema waterMassSchema = new ConceptSchema(WATERMASS);
    add(waterMassSchema, WaterMass.class);

    // adding AgentAction(s)
    AgentActionSchema requestWaterSchema = new AgentActionSchema(REQUESTWATER);
    add(requestWaterSchema, RequestWater.class);
    AgentActionSchema requestPourSchema = new AgentActionSchema(REQUESTPOUR);
    add(requestPourSchema, RequestPour.class);
    AgentActionSchema respondPourRequestSchema = new AgentActionSchema(RESPONDPOURREQUEST);
    add(respondPourRequestSchema, RespondPourRequest.class);
    AgentActionSchema returnWaterSchema = new AgentActionSchema(RETURNWATER);
    add(returnWaterSchema, ReturnWater.class);
    AgentActionSchema supplyWaterSchema = new AgentActionSchema(SUPPLYWATER);
    add(supplyWaterSchema, SupplyWater.class);

    // adding AID(s)
    ConceptSchema paperMillSchema = new ConceptSchema(PAPERMILL);
    add(paperMillSchema, PaperMill.class);
    ConceptSchema treatmentPlantSchema = new ConceptSchema(TREATMENTPLANT);
    add(treatmentPlantSchema, TreatmentPlant.class);
    ConceptSchema cementSchema = new ConceptSchema(CEMENT);
    add(cementSchema, Cement.class);
    ConceptSchema factorySchema = new ConceptSchema(FACTORY);
    add(factorySchema, Factory.class);
    ConceptSchema metallurgicalSchema = new ConceptSchema(METALLURGICAL);
    add(metallurgicalSchema, Metallurgical.class);
    ConceptSchema textileSchema = new ConceptSchema(TEXTILE);
    add(textileSchema, Textile.class);
    ConceptSchema stretchSchema = new ConceptSchema(STRETCH);
    add(stretchSchema, Stretch.class);
    ConceptSchema riverSchema = new ConceptSchema(RIVER);
    add(riverSchema, River.class);

    // adding Predicate(s)


    // adding fields
    waterTankSchema.add(WATERTANK_HASWATERMASS, waterMassSchema, ObjectSchema.OPTIONAL);
    waterTankSchema.add(WATERTANK_OWNEDBY, new ConceptSchema("Concept"), ObjectSchema.OPTIONAL);
    waterMassSchema.add(WATERMASS_VOLUME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    waterMassSchema.add(WATERMASS_CONTAMINANT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    treatmentPlantSchema.add(TREATMENTPLANT_HASTANK, waterTankSchema, 0, ObjectSchema.UNLIMITED);
    factorySchema.add(FACTORY_HASTANK, waterTankSchema, 0, ObjectSchema.UNLIMITED);
    stretchSchema.add(STRETCH_NEXTSTRETCH, stretchSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    paperMillSchema.addSuperSchema(factorySchema);
    cementSchema.addSuperSchema(factorySchema);
    metallurgicalSchema.addSuperSchema(factorySchema);
    textileSchema.addSuperSchema(factorySchema);
    stretchSchema.addSuperSchema(riverSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
